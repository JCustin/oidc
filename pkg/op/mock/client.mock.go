// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/oidc/pkg/op (interfaces: Client)

// Package mock is a generated GoMock package.
package mock

import (
	op "github.com/caos/oidc/pkg/op"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AccessTokenLifetime mocks base method
func (m *MockClient) AccessTokenLifetime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenLifetime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// AccessTokenLifetime indicates an expected call of AccessTokenLifetime
func (mr *MockClientMockRecorder) AccessTokenLifetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenLifetime", reflect.TypeOf((*MockClient)(nil).AccessTokenLifetime))
}

// AccessTokenType mocks base method
func (m *MockClient) AccessTokenType() op.AccessTokenType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenType")
	ret0, _ := ret[0].(op.AccessTokenType)
	return ret0
}

// AccessTokenType indicates an expected call of AccessTokenType
func (mr *MockClientMockRecorder) AccessTokenType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenType", reflect.TypeOf((*MockClient)(nil).AccessTokenType))
}

// ApplicationType mocks base method
func (m *MockClient) ApplicationType() op.ApplicationType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationType")
	ret0, _ := ret[0].(op.ApplicationType)
	return ret0
}

// ApplicationType indicates an expected call of ApplicationType
func (mr *MockClientMockRecorder) ApplicationType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationType", reflect.TypeOf((*MockClient)(nil).ApplicationType))
}

// GetAuthMethod mocks base method
func (m *MockClient) GetAuthMethod() op.AuthMethod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthMethod")
	ret0, _ := ret[0].(op.AuthMethod)
	return ret0
}

// GetAuthMethod indicates an expected call of GetAuthMethod
func (mr *MockClientMockRecorder) GetAuthMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthMethod", reflect.TypeOf((*MockClient)(nil).GetAuthMethod))
}

// GetID mocks base method
func (m *MockClient) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockClientMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockClient)(nil).GetID))
}

// IDTokenLifetime mocks base method
func (m *MockClient) IDTokenLifetime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDTokenLifetime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// IDTokenLifetime indicates an expected call of IDTokenLifetime
func (mr *MockClientMockRecorder) IDTokenLifetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDTokenLifetime", reflect.TypeOf((*MockClient)(nil).IDTokenLifetime))
}

// LoginURL mocks base method
func (m *MockClient) LoginURL(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginURL", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// LoginURL indicates an expected call of LoginURL
func (mr *MockClientMockRecorder) LoginURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginURL", reflect.TypeOf((*MockClient)(nil).LoginURL), arg0)
}

// RedirectURIs mocks base method
func (m *MockClient) RedirectURIs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedirectURIs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// RedirectURIs indicates an expected call of RedirectURIs
func (mr *MockClientMockRecorder) RedirectURIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedirectURIs", reflect.TypeOf((*MockClient)(nil).RedirectURIs))
}
