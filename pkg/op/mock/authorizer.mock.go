// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/oidc/pkg/op (interfaces: Authorizer)

// Package mock is a generated GoMock package.
package mock

import (
	oidc "github.com/caos/oidc/pkg/oidc"
	u "github.com/caos/oidc/pkg/op/u"
	gomock "github.com/golang/mock/gomock"
	schema "github.com/gorilla/schema"
	http "net/http"
	reflect "reflect"
)

// MockAuthorizer is a mock of Authorizer interface
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// Decoder mocks base method
func (m *MockAuthorizer) Decoder() *schema.Decoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decoder")
	ret0, _ := ret[0].(*schema.Decoder)
	return ret0
}

// Decoder indicates an expected call of Decoder
func (mr *MockAuthorizerMockRecorder) Decoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decoder", reflect.TypeOf((*MockAuthorizer)(nil).Decoder))
}

// Encoder mocks base method
func (m *MockAuthorizer) Encoder() *schema.Encoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encoder")
	ret0, _ := ret[0].(*schema.Encoder)
	return ret0
}

// Encoder indicates an expected call of Encoder
func (mr *MockAuthorizerMockRecorder) Encoder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encoder", reflect.TypeOf((*MockAuthorizer)(nil).Encoder))
}

// ErrorHandler mocks base method
func (m *MockAuthorizer) ErrorHandler() func(http.ResponseWriter, *http.Request, *oidc.AuthRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorHandler")
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request, *oidc.AuthRequest, error))
	return ret0
}

// ErrorHandler indicates an expected call of ErrorHandler
func (mr *MockAuthorizerMockRecorder) ErrorHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorHandler", reflect.TypeOf((*MockAuthorizer)(nil).ErrorHandler))
}

// Signe mocks base method
func (m *MockAuthorizer) Signe() u.Signer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signe")
	ret0, _ := ret[0].(u.Signer)
	return ret0
}

// Signe indicates an expected call of Signe
func (mr *MockAuthorizerMockRecorder) Signe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signe", reflect.TypeOf((*MockAuthorizer)(nil).Signe))
}

// Storage mocks base method
func (m *MockAuthorizer) Storage() u.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(u.Storage)
	return ret0
}

// Storage indicates an expected call of Storage
func (mr *MockAuthorizerMockRecorder) Storage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockAuthorizer)(nil).Storage))
}
